import { Component, OnInit, Self, Injector, forwardRef } from "@angular/core";
import {
  FormArray,
  FormControl,
  NgControl,
  ControlValueAccessor,
  AbstractControl,
  Validator,
  Validators,
  FormGroup,
  ControlContainer,
  NG_VALUE_ACCESSOR
} from "@angular/forms";
import { AddressFrmComponent } from "../address-frm/address-frm.component";
import { NameFrmComponent } from "../name-frm/name-frm.component";

@Component({
  selector: "app-amici-arr",
  template: `
    CIAO AMICICI
  ` /*`
    <fieldset>
      <h4>Fieldset array</h4>
      <div class="button-right">
        <button (click)="add()" class="green">Add</button>
      </div>
      <div>
        <article *ngFor="let ctrl of arr.controls; index as i">
          <div class="button-right">
            <button (click)="rem(i)" class="brown">Remove</button>
          </div>
          <app-name-frm [formControlName]="i"></app-name-frm>
        </article>
      </div>
    </fieldset>
  `*/
  //providers: [{ provide: NgControl, useExisting: forwardRef(() => AmiciArrComponent) }]
})
export class AmiciArrComponent implements ControlValueAccessor, Validator, OnInit {
  onTouch = () => {};

  arr: FormArray;
  constructor(public parent: ControlContainer, @Self() public controlDir: NgControl /*, private injector: Injector*/) {
    console.warn("INSIDE ARR-AMICI", parent);
    //QUI E' TROPPO PRESTO DEVO ASPETARE onInit()
    //console.info("ARR??", this.controlDir.control);
    //this.arr = this.controlDir.control as FormArray;
    this.controlDir.valueAccessor = this;
    //this.arr.valueAccessor = this;
    // console.log('CTRLDIR', controlDir);
  }

  writeValue(val: any[]): void {
    console.error("IO SONO UN VA - DOPO ONINIT?", val);
    // console.log("ARR val", val, " model -> view");
    // if (val) {
    //   if (this.arr.length != val.length) {
    //     // console.log('ALLINEO ARRAY DATI -> ARRAY DI FRMGROUP');
    //     for (let i = this.arr.length; i < val.length; i++) {
    //       this.arr.push(new FormControl(null));
    //     }
    //   }
    //   this.arr.patchValue(val, { emitEvent: false });
    //   this.arr.updateValueAndValidity({ onlySelf: true });
    // }
  }

  /* TODO: DYNAMIC ITEM CHILD COMPONENT

<!--<div [formControl]="ctrl" #idx="ngForm">
            <ng-container *ngComponentOutlet="itemCmpType; injector: injectNgControl(idx)"></ng-container>
          </div>-->

  itemCmpType = NameFrmComponent;
  injectNgControl(ctrl: NgControl) {
    console.log("INJECTOR PER ", ctrl);
    return Injector.create([{ provide: NgControl, useValue: ctrl }], this.injector);
  }
  */

  registerOnChange(fnChange: (val: IAddress) => void): void {
    // // console.log('ADESSO ARR FMCHANGE', fnChange);
    // this.arr.valueChanges.subscribe(fromView => {
    //   // console.log('ARR valFromView', fromView, ' call fnChange view -> model');
    //   fnChange(fromView);
    // });
  }

  //onTouch: Function;
  registerOnTouched(fn: any): void {
    // ribellione any by Aly
    this.onTouch = fn;
  }
  setDisabledState?(isDisabled: boolean): void {
    // // console.log('set Disable -> ', isDisabled);
    // if (isDisabled) this.arr.disable();
    // else this.arr.enable();
  }

  add() {
    this.arr.push(new FormControl(null));
  }

  rem(i: number) {
    this.arr.removeAt(i);
  }

  validate(ctrl: AbstractControl) {
    return null;
  }

  ngOnInit() {
    const control = this.parent.control;
    console.log("CE L'HO QUI?", this.parent.control);
    this.arr = this.parent.control as FormArray;
    //let validators = control.validator ? [control.validator, Validators.required] : Validators.required;
    //control.setValidators(validators);
    //control.updateValueAndValidity();
  }
}
